using AdventOfCode.Core;using AdventOfCode.Core.IO;namespace AdventOfCode2022.Challenges;[Challenge(8)]public class Challenge08(IInputReader inputReader){    [Part1]    public async Task<string> Part1Async()    {        var grid = await inputReader.ReadGridAsync<int>(8);        var visibleGrid = new bool[grid.GetLength(0) * grid.GetLength(1)];        var height = grid.GetLength(0);        var width = grid.GetLength(1);        for (var y = 0; y < height; y++)        {            var left = -1;            var right = -1;            for (var x = 0; x < width; x++)            {                if (grid[y, x] > left)                {                    visibleGrid[y * width + x] = true;                    left = grid[y, x];                }                if (grid[y, width - 1 - x] > right)                {                    visibleGrid[y * width + width - 1 - x] = true;                    right = grid[y, width - 1 - x];                }            }        }        for (var x = 0; x < width; x++)        {            var top = -1;            var bottom = -1;            for (var y = 0; y < height; y++)            {                if (grid[y, x] > top)                {                    visibleGrid[y * width + x] = true;                    top = grid[y, x];                }                if (grid[height - 1 - y, x] > bottom)                {                    visibleGrid[(height - 1 - y) * width + x] = true;                    bottom = grid[height - 1 - y, x];                }            }        }        return visibleGrid.Count(x => x).ToString();    }    [Part2]    public async Task<string> Part2Async()    {        var grid = await inputReader.ReadGridAsync<int>(8);        var height = grid.GetLength(0);        var width = grid.GetLength(1);        var bestScore = -1;        for (var y = 0; y < height; y++)        for (var x = 0; x < width; x++)        {            var leftScore = 0;            for (var i = x - 1; i >= 0; i--)            {                if (grid[y, i] >= grid[y, x])                {                    leftScore++;                    break;                }                leftScore++;            }            var rightScore = 0;            for (var i = x + 1; i < width; i++)            {                if (grid[y, i] >= grid[y, x])                {                    rightScore++;                    break;                }                rightScore++;            }            var topScore = 0;            for (var i = y - 1; i >= 0; i--)            {                if (grid[i, x] >= grid[y, x])                {                    topScore++;                    break;                }                topScore++;            }            var bottomScore = 0;            for (var i = y + 1; i < height; i++)            {                if (grid[i, x] >= grid[y, x])                {                    bottomScore++;                    break;                }                bottomScore++;            }            var score = leftScore * rightScore * topScore * bottomScore;            bestScore = Math.Max(score, bestScore);        }        return bestScore.ToString();    }}